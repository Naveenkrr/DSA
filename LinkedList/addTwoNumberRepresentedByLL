class Solution{
    //Function to add two numbers represented by linked list.
    static Node addTwoLists(Node num1, Node num2){
        num1 = removeTrailingZeroes(num1);
        num2 = removeTrailingZeroes(num2);
        
        num1 = reverse(num1);
        num2 = reverse(num2);
        
        return addList(num1 , num2);
    }
    
    static Node addList(Node num1 , Node num2){
        Node dummyHead = new Node(-1);
        Node tail = dummyHead;
        int carry = 0;
        while(num1 != null || num2!=null || carry>0){
            int x = num1 != null ? num1.data : 0;
            int y = num2 != null ? num2.data : 0;
            
            int sum = x + y + carry;
            carry = sum / 10;
            int rem = sum % 10;
            tail.next = new Node(rem);
            tail = tail.next;
            
            if(num1 != null)    num1 = num1.next;
            if(num2 != null)    num2 = num2.next;
        }
        if(dummyHead.next == null)
            return new Node(0);
        return reverse(dummyHead.next);
    }
    
    static Node reverse(Node head){
        Node prev = null , curr = head;
        while(curr != null){
            Node temp = curr.next;
            curr.next = prev;
            prev = curr;
            curr = temp;
        }
        return prev;
    }
    
    static Node removeTrailingZeroes(Node head){
        while(head != null && head.data == 0){
            head = head.next;
        }
        return head;
    }
}
